import numpy as np

def fen_str_to_array(fen_string):
    field_array = fen_string.split(" ")
    piece_placement = field_array.pop(0).split('/')
    new_piece_placement = []

    # Fill in spaces, ex. [R, 4, b, 2] becomes [R, 0, 0, 0, 0, b, 0, 0]
    for idx, rank in enumerate(piece_placement):
        rank = list(rank)
        new_rank = []

        if ('K') in rank:
            white_king_rank = idx 
        if ('k') in rank:
            black_king_rank = idx 
        
        for tile in rank:
            if tile.isdigit():
                num_spaces = int(tile)
                for _ in range(num_spaces):
                    new_rank.append('0')
                continue
            new_rank.append(tile)
        new_piece_placement.append(new_rank)
           
    return field_array, np.array(new_piece_placement), white_king_rank, black_king_rank


def fen_to_halfKP(fen_string):
    # Need to create two tuples (our_king_square, piece_square, piece_type, piece_color)
    # If one wanted to, it would technically be more efficient to cache these tensors rather than perform this transform on-the-fly

    # Using index notation of a1 = 0, ..., h8 = 63 for white and a8 = 0, ..., h1 = 63 for black
    # 1 represents each side's own piece color and -1 for opposing piece color
    white_tensor = black_tensor = np.zeros((64, 64, 5, 1), dtype=int)  
    field_array, piece_placement, w_king_rank, b_king_rank = fen_str_to_array(fen_string)
    
    # Find kings 
    for idx, tile in enumerate(piece_placement[w_king_rank]):
        if tile == 'K':
            w_king_square = ((7-w_king_rank) * 8) + idx
            break
    for idx, tile in enumerate(piece_placement[b_king_rank]):
        if tile == 'k':
            b_king_square = (b_king_rank * 8) + idx
            break

    # Find other pieces
    # Ordered as [rook, knight, bishop, queen, pawn] in the array
    for i, rank in enumerate(piece_placement):
        for j, tile in enumerate(rank):
            if (tile == 'R'):
                white_tensor[w_king_square, ]


   

fen_to_halfKP('4k2r/6r1/8/8/8/8/3R4/R3K3')


    